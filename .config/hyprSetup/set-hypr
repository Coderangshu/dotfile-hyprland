#!/bin/bash

# The following will attempt to install all needed packages to run Hyprland
# This is a quick and dirty script there are no error checking
# This script is meant to run on a clean fresh Arch install
#
# Below is a list of the packages that would be installed
#
# hyprland-git: This is the Hyprland compositor
# kitty: This is the default terminal
# pistol: kitty helper to view images in terminal by terminal file explorer
# waybar-hyprland: This is a fork of waybar with Hyprland workspace support and for systemdless kernels
# swww: This is used to set a desktop background image
# swaylock-effects: This allows for the locking of the desktop its a fork that adds some editional visual effects
# wofi: This is an application launcher menu
# wlogout: This is a logout menu that allows for shutdown, reboot and sleep
# mako: This is a graphical notification daemon
# xdg-desktop-portal-hyprland-git: xdg-desktop-portal backend for hyprland
# swappy: This is a screenshot editor tool
# grim: This is a screenshot tool it grabs images from a Wayland compositor
# slurp: This helps with screenshots, it selects a region in a Wayland compositor
# polkit-gnome: needed to get superuser access on some graphical appliaction
# python-requests: needed for the weather module script to execute
# pipewire: audio daemon
# pipewire-pulse: pulse utils required for audio and screen sharing
# wireplumber: enalbles audio and screen sharing using pipewire
# pamixer: This helps with audio settings such as volume
# pavucontrol: GUI for managing audio and audio devices
# brightnessctl: used to control monitor and keyboard bright level
# bluez: the bluetooth service
# bluez-utils: command line utilities to interact with bluettoth devices
# blueman: Graphical bluetooth manager
# udiskie: Automount USB to system
# file-roller: Backend set of tools for working with compressed files
# btop: Resource monitor that shows usage and stats for processor, memory, disks, network and processes.
# pacman-contrib: adds additional tools for pacman. needed for showing system updates in the waybar
# starship: allows to customize the shell prompt
# ttf-jetbrains-mono-nerd: Som nerd fonts for icons and overall look
# noto-fonts-emoji: fonts needed by the weather script in the top bar
# lxappearance: used to set GTK theme
# xfce4-settings: set of tools for xfce, needed to set GTK theme
# sddm: developement version of SDDM which is a display manager for graphical login
# sddm-sugar-candy-git: an sddm theme my theme is based on (copy of)
# zramd: to enable zram
# neofetch: terminal prompt
# python-pywal: custom colorscheme generator
# rmtrash: move file to trash
# exa: modified ls
# lf: terminal file browser
# ueberzug: image viewer in terminal
# zsh: bash substitute
# dragon-drag-and-drop: drag and drop items to and from terminal
# gammastep: wayland redshift

# set some colors
CNT="[\e[1;36mNOTE\e[0m]"
COK="[\e[1;32mOK\e[0m]"
CER="[\e[1;31mERROR\e[0m]"
CAT="[\e[1;37mATTENTION\e[0m]"
CWR="[\e[1;35mWARNING\e[0m]"
CAC="[\e[1;33mACTION\e[0m]"
INSTLOG="install.log"

#clear the screen
clear

# set some expectations for the user
echo -e "$CNT - You are about to execute a script that would attempt to setup Hyprland.
Please note that Hyprland is still in Beta.
Please note that VMs are not fully supported and if you try to run this on
a Virtual Machine there is a high chance this will fail.
Please note that support for Nvidia GPUs is limited and may require
more work which is beyond the scope of this script.
\n"

sleep 3

read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to continue with the install (y,n) ' INST
if [[ $INST == "Y" || $INST == "y" ]]; then
    echo -e "$COK - Starting install script.."
else
    echo -e "$CNT - This script would now exit, no changes were made to your system."
    exit
fi


echo -e "\n
$CNT - This script will run some commands that require sudo. You will be prompted to enter your password.
If you are worried about entering your password then you may want to review the content of the script."

sleep 3

#### Check for paru ####
ISPARU=/bin/paru
if [ -f "$ISPARU" ]; then 
    echo -e "$COK - Paru was located, moving on."
else 
    echo -e "$CWR - Paru was NOT located"
    read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to install paru (y,n) ' INSTPARU
    if [[ $INSTPARU == "Y" || $INSTPARU == "y" ]]; then
        git clone https://aur.archlinux.org/paru-bin.git &>> $INSTLOG
        cd paru-bin
        makepkg -si --noconfirm
        cd ..
        rm -rf paru-bin
        
    else
        echo -e "$CER - Paru is required for this script, now exiting"
        exit
    fi
fi

### Disable wifi powersave mode ###
read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to disable WiFi powersave? (y,n) ' WIFI
if [[ $WIFI == "Y" || $WIFI == "y" ]]; then
     LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
     echo -e "$CNT - The following file has been created $LOC."
     echo -e "[connection]\nwifi.powersave = 2" | sudo tee -a $LOC &>> $INSTLOG
     echo -e "\n"
     echo -e "$CNT - Restarting NetworkManager service..."
     sleep 1
     sudo systemctl restart NetworkManager &>> $INSTLOG
     sleep 3
fi

### Install all of the above packages ####
# installer() {
#     arr=$1
#     for SOFTWR in ${arr[@]}
#     do
#         #First lets see if the package is there
#         if paru -Qs $SOFTWR > /dev/null ; then
#             echo -e "$COK - $SOFTWR is already installed."
#         else
#             echo -e "$CNT - Now installing $SOFTWR ..."
#             paru -S --needed --noconfirm $SOFTWR
#             if paru -Qs $SOFTWR > /dev/null ; then
#                 echo -e "$COK - $SOFTWR was installed."
#             else
#                 echo -e "$CER - $SOFTWR install had failed, please check the install.log"
#                 exit
#             fi
#         fi
#     done
# }

read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to install the packages? (y,n) ' INST
if [[ $INST == "Y" || $INST == "y" ]]; then
    # update the DB first
    echo -e "$COK - Updating paru database..."
    paru -Sy
    
    #Stage 1
    echo -e "\n$CNT - Stage 1 - Installing main components, this may take a while..."
    paru -S --needed --noconfirm hyprland-git kitty pistol waybar-hyprland swww swaylock-effects wofi wlogout mako xdg-desktop-portal-hyprland-git swappy grim slurp

    #Stage 2
    echo -e "\n$CNT - Stage 2 - Installing additional tools and utilities, this may take a while..."
    paru -S --needed --noconfirm polkit-gnome python-requests pipewire pipewire-pulse wireplumber pamixer pavucontrol brightnessctl bluez bluez-utils blueman udiskie file-roller btop pacman-contrib

    #Stage 3
    echo -e "\n$CNT - Stage 3 - Installing theme and visual related tools and utilities, this may take a while..."
    paru -S --needed --noconfirm starship ttf-jetbrains-mono-nerd noto-fonts-emoji lxappearance xfce4-settings sddm sddm-sugar-candy-git zramd
    
    #Stage 4
    echo -e "\n$CNT - Stage 4 - Installing other required utilities, this may take a while..."
    paru -S --needed --noconfirm neofetch python-pywal rmtrash exa lf dragon-drag-and-drop gammastep


fi

read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to add the default services to autostart? (y,n) ' CFG
if [[ $CFG == "Y" || $CFG == "y" ]]; then
    # Start default services
    autostart() {
        echo -e "$CNT - Starting the $1 Service..."
	sudo systemctl enable --now $1
        # sudo s6-rc -u change $1
        # sudo s6-service add default $1
        sleep 2
    }
    # Start the bluetooth service
    autostart "bluetooth"

    # Enable and start zram
    autostart "zramd"
    
    # Enable the sddm login manager service
#    autostart "sddm"

    # sudo s6-db-reload
    
    # Clean out other portals
    echo -e "$CNT - Cleaning out conflicting xdg portals..."
    paru -R --noconfirm xdg-desktop-portal-gnome xdg-desktop-portal-gtk
fi

### Copy Config Files ###
read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to copy config files? (y,n) ' CFG
if [[ $CFG == "Y" || $CFG == "y" ]]; then
#    echo -e "$CNT - Copying config files..."
#    for DIR in hypr kitty mako swaylock waybar wlogout wofi 
#    do 
#        DIRPATH=~/.config/$DIR
#        if [ -d "$DIRPATH" ]; then 
#            echo -e "$CAT - Config for $DIR located, backing up."
#            mv $DIRPATH $DIRPATH-backup &>> $INSTLOG
#            echo -e "$COK - Backed up $DIR to $DIRPATH-backup."
#        fi
#        echo -e "$CNT - Copying $DIR config to $DIRPATH."  
#        cp -R $DIR ~/.config/ &>> $INSTLOG
#    done

    # Set some files as exacutable
    echo -e "$CNT - Setting some file as executable." 
    chmod +x ~/.config/hypr/scripts/bgaction
    chmod +x ~/.config/hypr/scripts/xdg-portal-hyprland
    chmod +x ~/.config/waybar/scripts/waybar-wttr.py
    chmod +x ~/.config/waybar/scripts/baraction
    chmod +x ~/.config/waybar/scripts/update-sys

    # Copy the SDDM theme
    echo -e "$CNT - Setting up the login screen."
    sudo cp -R ~/.config/hyprSetup/sdt /usr/share/sddm/themes/
    sudo chown -R $USER:$USER /usr/share/sddm/themes/sdt
    sudo mkdir /etc/sddm.conf.d
    echo -e "[Theme]\nCurrent=sdt" | sudo tee -a /etc/sddm.conf.d/10-theme.conf &>> $INSTLOG
    WLDIR=/usr/share/wayland-sessions
    if [ -d "$WLDIR" ]; then
        echo -e "$COK - $WLDIR found"
    else
        echo -e "$CWR - $WLDIR NOT found, creating..."
        sudo mkdir $WLDIR
    fi 
    sudo cp ~/.config/hyprSetup/extras/hyprland.desktop /usr/share/wayland-sessions/
    sudo sed -i 's/Exec=Hyprland/Exec=\/home\/'$USER'\/start-hypr/' /usr/share/wayland-sessions/hyprland.desktop
    cp ~/.config/hyprSetup/extras/start-hypr ~/

    #setup the first look and feel as dark
    ln -sf ~/.config/waybar/style/style-dark.css ~/.config/waybar/style.css
    ln -sf ~/.config/wofi/style/style-dark.css ~/.config/wofi/style.css
    xfconf-query -c xsettings -p /Net/ThemeName -s "Adwaita-dark"
    xfconf-query -c xsettings -p /Net/IconThemeName -s "Adwaita-dark"
    gsettings set org.gnome.desktop.interface gtk-theme "Adwaita-dark"
    gsettings set org.gnome.desktop.interface icon-theme "Adwaita-dark"
    ln -sf /usr/share/sddm/themes/sdt/Backgrounds/wallpaper-dark.jpg /usr/share/sddm/themes/sdt/wallpaper.jpg
fi

### Install the starship shell ###
read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to activate the starship shell? (y,n) ' STAR
if [[ $STAR == "Y" || $STAR == "y" ]]; then
    # install the starship shell
#    echo -e "$CNT - Hansen Crusher, Engage!"
    echo -e "$CNT - Updating .bashrc..."
    echo -e '\neval "$(starship init bash)"' >> ~/.bashrc
#    echo -e "$CNT - copying starship config file to ~/.confg ..."
#    cp extras/starship.toml ~/.config/
fi

### Script is done ###
echo -e "$CNT - Script had completed!"
read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to start Hyprland now? (y,n) ' HYP
if [[ $HYP == "Y" || $HYP == "y" ]]; then
	sudo systemctl start sddm
	# exec sudo s6-rc -u change sddm &>> $INSTLOG
else
    exit
fi
